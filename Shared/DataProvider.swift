//
//  DataProvider.swift
//  FIT
//
//  Created by Richard English on 10/07/2020.
//  Copyright Â© 2020 Richard English. All rights reserved.
//

import Foundation
import UIKit

// Constants to identify the app group container used for Settings-Watch.bundle and access
// the information in Settings-Watch.bundle.
struct WatchSettings {
    //    static let sharedContainerID = "" // Specify your group container ID here and Root.plist to make watch settings work.
    static let sharedContainerID = "group.com.wimbledonappcompany.SimpleWatchConnectivity"
    static let useLogFileForFileTransfer = "useLogFileForFileTransfer"
    static let clearLogsAfterTransferred = "clearLogsAfterTransferred"
}

// Define the interfaces for providing payload for Watch Connectivity APIs.
// MainViewController and FartlekInterfaceController adopt this protocol.
protocol DataProvider {
    var file: URL { get }
    var fileMetaData: [String: Any] { get }
}

// Generate default payload for commands, which contains a random color and a time stamp.
extension DataProvider {

    // Generate a file URL, used as the payload for transferFile.
    //
    // Use WatchSettings to choose the log file, which is generated by Logger
    // for debugging purpose, for file transfer from the watch side.
    // This is only for watchOS as the iOS app doesn't have WKBackgroundTask.
    var file: URL {
        #if os(watchOS)
        if WatchSettings.sharedContainerID.isEmpty == false {
            let defaults = UserDefaults(suiteName: WatchSettings.sharedContainerID)
            if let enabled = defaults?.bool(forKey: WatchSettings.useLogFileForFileTransfer), enabled {
                return CustomLogger.shared.getFileURL()
            }
        }
        #endif

        // Use Info.plist for file transfer.
        // Change this to a bigger file to make the file transfer progress more obvious.
        guard let url = Bundle.main.url(forResource: "Info", withExtension: "plist") else {
            fatalError("Failed to find Info.plist in current bundle")
        }
        return url
    }

    // Generate a file metadata dictionary, used as the payload for transferFile.
    var fileMetaData: [String: Any] {
      let fileMetaDataToReturn = [ "": "" ]
      return fileMetaDataToReturn
    }

}
